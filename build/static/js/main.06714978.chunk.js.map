{"version":3,"sources":["utils/asyncComponent.js","App.js","registerServiceWorker.js","index.js"],"names":["asyncComponent","importComponent","spinnerComponent","props","state","component","default","this","setState","C","Component","Home","TestPage","App","className","path","exact","React","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"8NAYe,SAASA,EAAeC,GAAuC,IAAvBC,EAAsB,uDAAL,KA4BpE,OA5ByE,YAIrE,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAEDC,MAAQ,CACTC,UAAW,MAJD,EAJmD,iNAe5BJ,IAf4B,gBAehDI,EAfgD,EAezDC,QAERC,KAAKC,SAAS,CACVH,cAlB6D,mIAuBjE,IAAMI,EAAIF,KAAKH,MAAMC,UACrB,OAAOI,EAAE,kBAACA,EAAMF,KAAKJ,OAAUD,MAxBkC,GAE5CQ,e,kMCR3BC,G,MAAOX,YADM,kBAAM,uDAKnBY,EAAWZ,YADM,kBAAM,+BAGRa,E,iLAEb,OACI,yBAAKC,UAAU,iBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,QAAQV,UAAWM,IAC/B,kBAAC,IAAD,CAAOI,KAAK,QAAQV,UAAWO,IAC/B,kBAAC,IAAD,CAAOI,OAAK,EAACD,KAAK,IAAIV,UAAWM,U,GAPpBM,IAAMP,WCFjCQ,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5B,QACfsB,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KCxEjEC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDSb,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,yBAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,OAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,yBAAN,sBAEP3B,IAiDV,SAAiCO,GAE/BuB,MAAMvB,GACHI,KAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,KAAK,SAAAC,GACjCA,EAAayB,aAAa1B,KAAK,WAC7BT,OAAOC,SAASmC,aAKpBhC,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEArEAoB,CAAwBhC,GAIxBC,UAAUC,cAAc2B,MAAMzB,KAAK,WACjCO,QAAQC,IACN,+GAMJb,EAAgBC,MClCxBiC,K","file":"static/js/main.06714978.chunk.js","sourcesContent":["// implements code splitting for route components\nimport React,{ Component } from 'react'\n\n\n\n\n\n/*\n * returns an a react component that \n * asynchronously loads the target component on mounting\n * renders an optional spinnerComponent while loading the main component\n */\nexport default function asyncComponent(importComponent,spinnerComponent=null){ \n    \n    class AsyncComponent extends Component{\n        \n        constructor(props){\n            super(props)\n\n            this.state = {\n                component: null // the actual component will be asynchronously loaded on mounting\n            }\n        }\n\n        async componentDidMount(){\n\n            // async loading of the target component\n            const { default: component } = await importComponent()\n            \n            this.setState({\n                component\n            })\n        }\n\n        render(){\n            const C = this.state.component;\n            return C?<C {...this.props} />:spinnerComponent;\n        }\n    }\n\n    return AsyncComponent\n}","import React from 'react'\nimport asyncComponent from './utils/asyncComponent'\nimport {Switch, Route} from 'react-router-dom'\nimport './App.css'\n\nconst HomeImport = () => import('pages/home')\nconst Home = asyncComponent(HomeImport)\n\n\nconst TestPageImport = () => import('pages/sample-component')\nconst TestPage = asyncComponent(TestPageImport)\n\nexport default class App extends React.Component {\n    render() {\n        return(\n            <div className=\"pageContainer\">\n                <Switch>\n                    <Route path=\"/home\" component={Home} />\n                    <Route path=\"/test\" component={TestPage} />\n                    <Route exact path=\"/\" component={Home} />\n                </Switch>\n            </div>\n        )\n    }\n}   \n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {HashRouter} from 'react-router-dom'\nimport App from './App'\nimport registerServiceWorker from './registerServiceWorker'\n\n\nReactDOM.render(\n    <HashRouter>\n        <App />\n    </HashRouter>,\n    document.getElementById('root')\n)\n\nregisterServiceWorker()\n"],"sourceRoot":""}